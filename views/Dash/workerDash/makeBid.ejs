<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>WrokerBID</title>
    <link rel="stylesheet" href="/css/style.css" />
    <link rel="stylesheet" href="/css/pop.css" />
    <!-- <link rel="stylesheet" href="https://www.w3schools.com/w3css/4/w3.css" /> -->
    <style>
      /* Bid form styles */
      .bid-form {
        background: var(--base-clr);
        padding: 30px;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        max-width: 600px;
        margin: 30px auto;
      }

      .bid-form h4 {
        font-size: 24px;
        color: var(--text-clr);
        text-align: center;
        margin-bottom: 20px;
      }

      .bid-form label {
        display: block;
        font-weight: bold;
        margin-bottom: 8px;
        color: var(--text-clr);
      }

      .bid-form input[type="number"],
      .bid-form input[type="date"],
      .bid-form textarea {
        width: 100%;
        padding: 12px;
        margin-bottom: 20px;
        border: 1px solid var(--line-clr);
        border-radius: 4px;
        font-size: 16px;
        color: var(--secondary-text-clr);
        box-sizing: border-box;
      }

      .bid-form textarea {
        resize: vertical;
      }

      .bid-form input[type="submit"] {
        background-color: var(--accent-clr);
        color: var(--base-clr);
        border: none;
        padding: 14px 20px;
        font-size: 18px;
        cursor: pointer;
        border-radius: 4px;
        width: 100%;
        transition: background-color 0.3s;
      }

      .bid-form input[type="submit"]:hover {
        background-color: var(--hover-clr);
      }

      /* Responsive Design */
      @media screen and (max-width: 768px) {
        .wrapper .sidebar {
          width: 60px;
        }

        .wrapper .sidebar h2 {
          display: none;
        }

        .wrapper .sidebar ul li a {
          text-align: center;
        }

        .wrapper .sidebar ul li a .fas {
          margin-right: 0;
        }

        .wrapper .main_content {
          margin-left: 60px;
        }

        .bid-form {
          padding: 20px;
        }
      }

      @media screen and (max-width: 480px) {
        .wrapper .sidebar {
          width: 50px;
        }

        .wrapper .main_content {
          margin-left: 50px;
        }

        .wrapper .sidebar .social_media {
          display: none;
        }

        .bid-form {
          padding: 15px;
        }
      }
      .custom-card-description {
        font-size: 1em;
        color: rgb(8, 99, 235);
        margin-top: 8px;
      }
    </style>
  </head>
  <body>
    <!-- Include the nav.ejs partial -->
    <%- include('../partials/nav') %>
    <main>
      <div class="container123">
        <h3>
          <a
            style="text-decoration: none; color: blue"
            href="/worker/GetProjectPage"
            >Back</a
          >
        </h3>
        <p>
          Welcome! You can make bid on available projects, accept tasks, and
          track your work progress.
        </p>
        <p class="custom-card-description">
          <strong>Student Name:</strong> <%= project.student_name %><br />

          <strong>Deadline:</strong> <%= new
          Date(project.deadline).toLocaleDateString() %><br />
          <strong>Budget:</strong> <%= project.budget %><br />
          <strong>Skills Required:</strong> <%= project.skills_required %><br />

          <strong>Description:</strong> <%= project.description %><br />
        </p>
      </div>

      <div class="container123">
        <!-- Bid Form -->
        <div class="bid-form">
          <h4>Submit Your Bid</h4>
          <form id="bidForm">
            <label for="amount">ProjectName:</label>
            <input
              type="text"
              id="projectName"
              name="projectName"
              value="<%=project.assignment_title  %>"
            />

            <label for="amount">Bid Amount (INR):</label>
            <input type="number" id="amount" name="amount" required />

            <label for="description">Bid Description:</label>
            <textarea
              id="description"
              name="description"
              rows="4"
              required
              oninput="limitDescryption(event)"
            ></textarea>

            <label for="deadline">Deadline:</label>
            <input type="date" id="deadline" name="deadline" required />

            <input type="submit" value="Submit Bid" />
          </form>
        </div>
      </div>
    </main>

    <%- include('../partials/pop') %>

    <script src="/scripts/app.js"></script>
    <script src="/scripts/main.js"></script>
    <script src="/scripts/pop.js"></script>

    <script>
      function limitDescryption(event) {
        const inputField = event.target;

        const maxLength = 600; // maximum characters allowed in the input

        // Limit characters
        if (inputField.value.length > maxLength) {
          inputField.value = inputField.value.slice(0, maxLength);
          showError(
            `${
              inputField.name || inputField.id
            } should be between 1 and 600 characters.`
          );
        }
      }
    </script>

    <script>
      function formatRemainingTime(ms) {
        const seconds = Math.floor(ms / 1000);
        const minutes = Math.floor(seconds / 60);
        const hours = Math.floor(minutes / 60);
        const days = Math.floor(hours / 24);

        const remainingSeconds = seconds % 60;
        const remainingMinutes = minutes % 60;
        const remainingHours = hours % 24;

        return `${days} days, ${remainingHours} hours, ${remainingMinutes} minutes, ${remainingSeconds} seconds`;
      }

      document
        .getElementById("bidForm")
        .addEventListener("submit", async (e) => {
          e.preventDefault(); // Prevent default form submission

          // Updated formData object to match the new form structure
          const formData = {
            amount: document.getElementById("amount").value.trim(),
            description: document.getElementById("description").value.trim(),
            deadline: document.getElementById("deadline").value.trim(),
          };

          // Validate required fields
          if (!formData.amount || !formData.description || !formData.deadline) {
            showErrorPopup("Please fill out all required fields.");
            return;
          }

          try {
            const projectID = "<%= projectID %>"; // Inject projectID into the template
            const expiresAt = "<%= expiresAt %>"; // Inject expiresAt into the template

            const response = await fetch(
              `/worker/MakeBid/${projectID}/${expiresAt}`,
              {
                method: "POST",
                headers: {
                  "Content-Type": "application/json",
                },
                body: JSON.stringify(formData),
              }
            );

            // Handle the response
            const result = await response.json();

            if (!response.ok) {
              // If response is not OK, handle the specific error status codes
              handleErrorResponse(response.status, result);
              return; // Exit early to prevent further handling
            }

            // If request was successful, handle success message
            if (result.success) {
              showMessage(result.message || "Bid submitted successfully!");
              document.getElementById("bidForm").reset();
              setTimeout(() => {
                window.location.href = "/worker/OfferPage";
              }, 3000);
            }
          } catch (error) {
            console.error("Network or unexpected error:", error.message);
            showError("An unexpected error occurred. Please try again later.");
          }
        });

      // Function to handle different error responses
      function handleErrorResponse(status, result) {
        switch (status) {
          case 400:
            handleBadRequest(result);
            break;
          case 404:
            showError(result.message || "Project not found.");
            break;
          case 429:
            handleRateLimit(result);
            break;
          case 401:
            showError(result.message || "Unauthorized: You need to log in.");
            break;
          case 500:
            showError(
              result.message || "Internal Server Error: Please try again later."
            );
            break;
          default:
            showError(result.message || "An error occurred. Please try again.");
        }
      }

      // Function to handle bad request errors (400)
      function handleBadRequest(result) {
        if (result.redirect) {
          setTimeout(() => {
            window.location.href = "/CWS/profile";
          }, 4000);
        }
        if (result.errors && result.errors.length > 0) {
          const errorMessages = result.errors.join("\n");
          showError(errorMessages);
        } else {
          showError(result.message || "Bad Request: Please check your input.");
        }
      }

      // Function to handle rate-limiting errors (429)
      function handleRateLimit(result) {
        const remainingTime = formatRemainingTime(result.remainingTime);
        showError(
          `${result.message} Offers will be allowed again after: ${new Date(
            result.resetAt
          ).toLocaleString()}`
        );

        // Show additional message after a delay (6 seconds)
        setTimeout(() => {
          showError(`You can make an offer again in: ${remainingTime}`);
        }, 6000); // 6-second delay before showing reset time
      }
    </script>
    <script type="module" src="/scripts/foreground.js"></script>
  </body>
</html>
